const fs = require('fs');
const path = require('path');

class VisualizadorLogs {
  constructor() {
    this.pastaSaida = 'saida_estoque';
  }

  // Fun√ß√£o principal
  exibirLogs() {
    console.log('üìã VISUALIZADOR DE LOGS - √öLTIMA EXECU√á√ÉO\n');
    
    try {
      this.exibirUltimoProcessamento();
      this.listarLogsDisponiveis();
    } catch (error) {
      console.error('‚ùå Erro ao carregar logs:', error.message);
    }
  }

  // Exibe o √∫ltimo processamento
  exibirUltimoProcessamento() {
    const arquivoLog = path.join(this.pastaSaida, 'ultimo_processamento.json');
    
    if (!fs.existsSync(arquivoLog)) {
      console.log('‚ö†Ô∏è  Nenhum log de processamento encontrado.');
      console.log('   Execute o processador v3 primeiro.\n');
      return;
    }

    const log = JSON.parse(fs.readFileSync(arquivoLog, 'utf8'));
    
    console.log('üïê √öLTIMO PROCESSAMENTO');
    console.log('='.repeat(50));
    console.log(`üìÖ Data/Hora: ${log.execucao.dataHoraBrasil}`);
    console.log(`‚è±Ô∏è  Dura√ß√£o: ${log.execucao.duracao}`);
    console.log(`üìä Vers√£o: ${log.execucao.versao}`);
    
    console.log('\nüìà RESUMO ESTAT√çSTICO:');
    console.log(`   üìÑ Linhas processadas: ${log.resumo.totalLinhasProcessadas.toLocaleString()}`);
    console.log(`   ‚úÖ Produtos v√°lidos: ${log.resumo.produtosValidos.toLocaleString()}`);
    console.log(`   ‚ùå Produtos inv√°lidos: ${log.resumo.produtosInvalidos}`);
    console.log(`   üì¶ Sem estoque: ${log.resumo.produtosSemEstoque.toLocaleString()}`);
    console.log(`   üè∑Ô∏è  Categorias: ${log.resumo.totalCategorias}`);
    console.log(`   ‚ö†Ô∏è  Erros: ${log.resumo.totalErros}`);

    console.log('\nüè∑Ô∏è  CATEGORIAS PROCESSADAS:');
    log.categorias
      .sort((a, b) => b.quantidade - a.quantidade)
      .forEach(cat => {
        console.log(`   ${cat.nome}: ${cat.quantidade} produtos (R$ ${cat.valorTotal}) | Com estoque: ${cat.produtosComEstoque}`);
      });

    console.log('\nüí∞ TOP 5 PRODUTOS MAIS CAROS:');
    log.amostrasProcessamento.produtos5MaisCaros.forEach((produto, index) => {
      console.log(`   ${index + 1}. ${produto.nome} - R$ ${produto.preco} (${produto.categoria}) - Estoque: ${produto.estoque}`);
    });

    console.log('\nüì¶ TOP 5 PRODUTOS COM MAIOR ESTOQUE:');
    log.amostrasProcessamento.produtosMaiorEstoque.forEach((produto, index) => {
      console.log(`   ${index + 1}. ${produto.nome} - ${produto.estoque} unidades (${produto.categoria}) - R$ ${produto.preco}`);
    });

    console.log('\nüìÅ ARQUIVOS GERADOS:');
    log.arquivosGerados.forEach(arquivo => {
      const tamanhoMB = (arquivo.tamanho / 1024 / 1024).toFixed(2);
      console.log(`   ‚úÖ ${arquivo.arquivo} (${tamanhoMB} MB) - ${arquivo.produtos}`);
    });

    if (log.erros && log.erros.length > 0) {
      console.log('\n‚ö†Ô∏è  ERROS ENCONTRADOS:');
      log.erros.slice(0, 5).forEach(erro => {
        console.log(`   Linha ${erro.linha}: ${erro.erro}`);
      });
      if (log.erros.length > 5) {
        console.log(`   ... e mais ${log.erros.length - 5} erros`);
      }
    }

    console.log('\nüéØ CONFIGURA√á√ÉO USADA:');
    console.log(`   Incluir sem estoque: ${log.configuracao.processamento.incluirProdutosSemEstoque ? 'Sim' : 'N√£o'}`);
    console.log(`   Pre√ßo m√≠nimo: R$ ${log.configuracao.processamento.precoMinimo}`);
    console.log(`   Validar SKU: ${log.configuracao.validacoes.skuObrigatorio ? 'Sim' : 'N√£o'}`);
    console.log(`   Publicar automaticamente: ${log.configuracao.woocommerce.publicarAutomaticamente ? 'Sim' : 'N√£o'}`);
  }

  // Lista todos os logs dispon√≠veis
  listarLogsDisponiveis() {
    console.log('\nüìÇ LOGS DISPON√çVEIS:');
    console.log('='.repeat(30));
    
    if (!fs.existsSync(this.pastaSaida)) {
      console.log('   Pasta de sa√≠da n√£o encontrada');
      return;
    }

    const arquivos = fs.readdirSync(this.pastaSaida)
      .filter(arquivo => arquivo.startsWith('log_execucao_') && arquivo.endsWith('.json'))
      .sort()
      .reverse(); // Mais recentes primeiro

    if (arquivos.length === 0) {
      console.log('   Nenhum log de execu√ß√£o encontrado');
      return;
    }

    console.log(`   üìã ${arquivos.length} execu√ß√µes registradas:`);
    arquivos.slice(0, 10).forEach((arquivo, index) => {
      const stats = fs.statSync(path.join(this.pastaSaida, arquivo));
      const data = stats.mtime.toLocaleString('pt-BR');
      console.log(`   ${index + 1}. ${arquivo} (${data})`);
    });

    if (arquivos.length > 10) {
      console.log(`   ... e mais ${arquivos.length - 10} logs antigos`);
    }
  }

  // Exibe log espec√≠fico
  exibirLogEspecifico(nomeArquivo) {
    const caminhoArquivo = path.join(this.pastaSaida, nomeArquivo);
    
    if (!fs.existsSync(caminhoArquivo)) {
      console.log(`‚ùå Arquivo n√£o encontrado: ${nomeArquivo}`);
      return;
    }

    const log = JSON.parse(fs.readFileSync(caminhoArquivo, 'utf8'));
    
    console.log(`üìã LOG ESPEC√çFICO: ${nomeArquivo}\n`);
    this.exibirDetalhesLog(log);
  }

  // Exibe logs resumidos dos √∫ltimos dias
  exibirHistorico(dias = 7) {
    console.log(`\nüìä HIST√ìRICO DOS √öLTIMOS ${dias} DIAS:`);
    console.log('='.repeat(40));
    
    const agora = new Date();
    const limiteData = new Date(agora.getTime() - (dias * 24 * 60 * 60 * 1000));
    
    const arquivosRecentes = fs.readdirSync(this.pastaSaida)
      .filter(arquivo => arquivo.startsWith('log_execucao_') && arquivo.endsWith('.json'))
      .map(arquivo => {
        const stats = fs.statSync(path.join(this.pastaSaida, arquivo));
        return { arquivo, data: stats.mtime };
      })
      .filter(item => item.data >= limiteData)
      .sort((a, b) => b.data - a.data);

    if (arquivosRecentes.length === 0) {
      console.log(`   Nenhuma execu√ß√£o nos √∫ltimos ${dias} dias`);
      return;
    }

    console.log(`   üìà ${arquivosRecentes.length} execu√ß√µes encontradas:\n`);
    
    arquivosRecentes.forEach((item, index) => {
      try {
        const log = JSON.parse(fs.readFileSync(path.join(this.pastaSaida, item.arquivo), 'utf8'));
        console.log(`   ${index + 1}. ${item.data.toLocaleString('pt-BR')}`);
        console.log(`      ‚úÖ ${log.resumo.produtosValidos} produtos v√°lidos`);
        console.log(`      ‚ùå ${log.resumo.produtosInvalidos} inv√°lidos`);
        console.log(`      ‚è±Ô∏è  ${log.execucao.duracao}`);
        console.log('');
      } catch (error) {
        console.log(`   ${index + 1}. ${item.data.toLocaleString('pt-BR')} - Erro ao ler log`);
      }
    });
  }

  // Compara duas execu√ß√µes
  compararExecucoes(arquivo1, arquivo2) {
    console.log('üîç COMPARA√á√ÉO DE EXECU√á√ïES\n');
    
    try {
      const log1 = JSON.parse(fs.readFileSync(path.join(this.pastaSaida, arquivo1), 'utf8'));
      const log2 = JSON.parse(fs.readFileSync(path.join(this.pastaSaida, arquivo2), 'utf8'));
      
      console.log(`üìä COMPARA√á√ÉO:`);
      console.log(`   ${arquivo1} vs ${arquivo2}\n`);
      
      console.log('üìà ESTAT√çSTICAS:');
      console.log(`   Produtos v√°lidos: ${log1.resumo.produtosValidos} ‚Üí ${log2.resumo.produtosValidos} (${log2.resumo.produtosValidos - log1.resumo.produtosValidos >= 0 ? '+' : ''}${log2.resumo.produtosValidos - log1.resumo.produtosValidos})`);
      console.log(`   Produtos inv√°lidos: ${log1.resumo.produtosInvalidos} ‚Üí ${log2.resumo.produtosInvalidos} (${log2.resumo.produtosInvalidos - log1.resumo.produtosInvalidos >= 0 ? '+' : ''}${log2.resumo.produtosInvalidos - log1.resumo.produtosInvalidos})`);
      console.log(`   Categorias: ${log1.resumo.totalCategorias} ‚Üí ${log2.resumo.totalCategorias} (${log2.resumo.totalCategorias - log1.resumo.totalCategorias >= 0 ? '+' : ''}${log2.resumo.totalCategorias - log1.resumo.totalCategorias})`);
      
    } catch (error) {
      console.log(`‚ùå Erro ao comparar: ${error.message}`);
    }
  }
}

// Execu√ß√£o principal
if (require.main === module) {
  const visualizador = new VisualizadorLogs();
  
  const args = process.argv.slice(2);
  const comando = args[0];
  
  switch (comando) {
    case 'historico':
      const dias = parseInt(args[1]) || 7;
      visualizador.exibirHistorico(dias);
      break;
    case 'arquivo':
      const arquivo = args[1];
      if (arquivo) {
        visualizador.exibirLogEspecifico(arquivo);
      } else {
        console.log('‚ùå Especifique o nome do arquivo');
      }
      break;
    case 'comparar':
      const arq1 = args[1];
      const arq2 = args[2];
      if (arq1 && arq2) {
        visualizador.compararExecucoes(arq1, arq2);
      } else {
        console.log('‚ùå Especifique dois arquivos para comparar');
      }
      break;
    default:
      visualizador.exibirLogs();
  }
}

module.exports = VisualizadorLogs;